package uk.ac.ox.oxfish.biology.boxcars;

import org.jetbrains.annotations.NotNull;
import org.junit.Assert;
import org.junit.Test;
import uk.ac.ox.oxfish.biology.Species;
import uk.ac.ox.oxfish.biology.complicated.VariableProportionAging;
import uk.ac.ox.oxfish.biology.complicated.factory.FixedRecruitmentFactory;
import uk.ac.ox.oxfish.biology.complicated.factory.NoDiffuserFactory;
import uk.ac.ox.oxfish.biology.complicated.factory.OneBinAbundanceFactory;
import uk.ac.ox.oxfish.biology.complicated.factory.ProportionalMortalityFactory;
import uk.ac.ox.oxfish.biology.initializer.factory.SingleSpeciesAbundanceFactory;
import uk.ac.ox.oxfish.geography.mapmakers.SimpleMapInitializerFactory;
import uk.ac.ox.oxfish.model.FishState;
import uk.ac.ox.oxfish.model.scenario.PrototypeScenario;
import uk.ac.ox.oxfish.utility.parameters.FixedDoubleParameter;

import java.util.Arrays;

import static org.junit.Assert.assertEquals;


//refer to fixedboxcar.R in the inputs/test folder for why the numbers targeted are the ones we are targeting!



public class FixedBoxcarTest {


    @Test
    public void vonBertalanffy() throws Exception {

        //4,L_zero=10,L_inf=113,K=0.364
        double length = FixedBoxcar.VonBertalanffyLength(4,
                                                         0.364,
                                                         113,
                                                         10
        );
        assertEquals(length,
                            88.98379,
                            .0001);
    }

    @Test
    public void simpleGraduation() throws Exception {


        double[] population = new double[]{100, 100, 100};
        double[] graduationRate = new double[]{.5, .2, 0};
        double[] graduates = VariableProportionAging.variableAging(population, graduationRate);
        Assert.assertArrayEquals(
                population,
                new double[]{50, 130, 120},
                .0001f

        );

        Assert.assertArrayEquals(
                graduates,
                new double[]{50, 20, 0f},
                .0001f

        );


        for(int i=0; i<1000; i++)
            VariableProportionAging.variableAging(population, graduationRate);
        Assert.assertArrayEquals(
                population,
                new double[]{0, 0, 300},
                .0001f

        );

    }


    @Test
    public void equallySpaced() throws Exception {

        FixedBoxcar fixedBoxcar = FixedBoxcar.buildEquallySpacedVB(
                10,
                113,
                0.364,
                1,
                100
        );

        //equal distance (originally from R)
        System.out.println(Arrays.toString(fixedBoxcar.getLengthPerBin()));
        Assert.assertArrayEquals(
                fixedBoxcar.getLengthPerBin(),
                new double[]{10, 11.040404040404, 12.0808080808081, 13.1212121212121, 14.1616161616162, 15.2020202020202,
                        16.2424242424242, 17.2828282828283, 18.3232323232323, 19.3636363636364, 20.4040404040404,
                        21.4444444444444, 22.4848484848485, 23.5252525252525, 24.5656565656566, 25.6060606060606,
                        26.6464646464646, 27.6868686868687, 28.7272727272727, 29.7676767676768, 30.8080808080808,
                        31.8484848484848, 32.8888888888889, 33.9292929292929, 34.969696969697, 36.010101010101,
                        37.0505050505051, 38.0909090909091, 39.1313131313131, 40.1717171717172, 41.2121212121212,
                        42.2525252525253, 43.2929292929293, 44.3333333333333, 45.3737373737374, 46.4141414141414,
                        47.4545454545455, 48.4949494949495, 49.5353535353535, 50.5757575757576, 51.6161616161616,
                        52.6565656565657, 53.6969696969697, 54.7373737373737, 55.7777777777778, 56.8181818181818,
                        57.8585858585859, 58.8989898989899, 59.9393939393939, 60.979797979798, 62.020202020202, 63.0606060606061, 64.1010101010101, 65.1414141414141, 66.1818181818182, 67.2222222222222, 68.2626262626263, 69.3030303030303, 70.3434343434344, 71.3838383838384, 72.4242424242424, 73.4646464646465, 74.5050505050505, 75.5454545454545, 76.5858585858586, 77.6262626262626, 78.6666666666667, 79.7070707070707, 80.7474747474747, 81.7878787878788, 82.8282828282828, 83.8686868686869, 84.9090909090909, 85.9494949494949, 86.989898989899, 88.030303030303, 89.0707070707071, 90.1111111111111, 91.1515151515151, 92.1919191919192, 93.2323232323232, 94.2727272727273, 95.3131313131313, 96.3535353535353, 97.3939393939394, 98.4343434343434, 99.4747474747475, 100.515151515152, 101.555555555556, 102.59595959596, 103.636363636364, 104.676767676768, 105.717171717172, 106.757575757576, 107.79797979798, 108.838383838384, 109.878787878788, 110.919191919192, 111.959595959596, 113}
                , .001f);

        System.out.println(Arrays.toString(fixedBoxcar.getProportionGraduating()));
        Assert.assertArrayEquals(
                fixedBoxcar.getProportionGraduating(),
                new double[]{0.0987287671232877,0.0977315068493149,0.0967342465753425,0.0957369863013698,0.0947397260273975,0.0937424657534245,0.0927452054794519,0.0917479452054793,0.0907506849315071,0.0897534246575345,0.0887561643835615,0.0877589041095889,0.0867616438356163,0.0857643835616437,0.0847671232876711,0.0837698630136988,0.0827726027397262,0.0817753424657533,0.080778082191781,0.0797808219178081,0.0787835616438355,0.0777863013698632,0.0767890410958903,0.0757917808219177,0.0747945205479451,0.0737972602739725,0.0727999999999999,0.0718027397260273,0.0708054794520547,0.0698082191780821,0.06881095890411,0.0678136986301369,0.0668164383561648,0.0658191780821917,0.0648219178082191,0.0638246575342465,0.0628273972602739,0.0618301369863017,0.0608328767123287,0.0598356164383561,0.0588383561643835,0.0578410958904109,0.0568438356164383,0.0558465753424657,0.0548493150684931,0.0538520547945209,0.0528547945205479,0.0518575342465753,0.0508602739726027,0.0498630136986301,0.0488657534246575,0.0478684931506849,0.0468712328767123,0.0458739726027397,0.0448767123287671,0.0438794520547945,0.0428821917808219,0.0418849315068493,0.0408876712328772,0.0398904109589035,0.038893150684932,0.0378958904109589,0.0368986301369863,0.0359013698630137,0.0349041095890411,0.0339068493150689,0.0329095890410954,0.0319123287671237,0.0309150684931502,0.0299178082191785,0.0289205479452054,0.0279232876712329,0.0269260273972602,0.0259287671232876,0.024931506849315,0.0239342465753428,0.0229369863013695,0.0219397260273975,0.0209424657534244,0.0199452054794523,0.0189479452054792,0.0179506849315071,0.0169534246575342,0.0159561643835616,0.014958904109589,0.0139616438356164,0.0129643835616438,0.0119671232876712,0.0109698630136986,0.00997260273972601,0.00897534246575341,0.00797808219178092,0.00698082191780812,0.00598356164383568,0.00498630136986301,0.00398904109589041,0.00299178082191781,0.00199452054794521,0.000997260273972603,Double.NaN},
                .001f);

        //should start empty!
        for(int i=0; i<100; i++)
            assertEquals(0,
                                fixedBoxcar.getCurrentDistribution()[i],
                                .001f);

        //add 10,000 recruits!
        fixedBoxcar.getCurrentDistribution()[0]=10000;
        //step for 100 times
        for(int i=0; i<100; i++)
            VariableProportionAging.variableAging(fixedBoxcar.getCurrentDistribution(),
                                                  fixedBoxcar.getProportionGraduating());
        System.out.println(fixedBoxcar.getCurrentDistribution()[0]);
        //these numbers also come from R
        Assert.assertArrayEquals(fixedBoxcar.getCurrentDistribution(),
                                 new double[]{0.30587989389711,3.54106912667271,20.0637167375017,74.1705766261596,201.213410289245,427.19208453817,739.204443575898,1072.05924557846,1329.97014479903,1433.41632817825,1358.632467151,1143.64205936042,861.852556433872,585.391827149071,360.409041860779,202.109141523394,103.66537265996,48.8109903782318,21.1650348161811,8.47526368479341,3.14191750379627,1.08068033644209,0.345549000511795,0.102893929258588,0.0285769079746924,0.0074129799988602,0.00179831634444048,0.000408434070981236,8.69353318219646e-05,1.73571615462676e-05,3.25324250253537e-06,5.72819862357933e-07,9.48104969461112e-08,1.47594848851869e-08,2.16207738227005e-09,2.98151115343759e-10,3.87185874226393e-11,4.73638887862635e-12,5.45911682591979e-13,5.92957510810495e-14,6.0702606862166e-15,5.8574468225491e-16,5.32770460179708e-17,4.56767910275878e-18,3.69102815748017e-19,2.81091791544379e-20,2.01711631565974e-21,1.36366895961211e-22,8.68311939818378e-24,5.20601211728481e-25,2.93799431453971e-26,1.56007908649944e-27,7.79121189446493e-29,3.65778230722571e-30,1.61344846443301e-31,6.68288949766926e-33,2.59758455677641e-34,9.46828790281553e-36,3.23403292173892e-37,1.03427744419678e-38,3.09435325865427e-40,8.65235166048602e-42,2.25886332269846e-43,5.50002010474222e-45,1.24752385046928e-46,2.63267745607786e-48,5.16207213548706e-50,9.39069622041791e-52,1.58249098258239e-53,2.46618440942403e-55,3.54785572958934e-57,4.70236804870274e-59,5.73013264463596e-61,6.40506278227866e-63,6.55125209394921e-65,6.11516489053087e-67,5.19414807691079e-69,4.00191992085745e-71,2.78719741109495e-73,1.74809177642567e-75,9.83204434609174e-78,4.93630365240057e-80,2.20096547739386e-82,8.66554350255061e-85,2.9934036321879e-87,9.00696653635925e-90,2.34132617361658e-92,5.20857158652766e-95,9.80861477481338e-98,1.54376690809156e-100,2.00016357066907e-103,2.09480789174677e-106,1.73424669915518e-109,1.10352676069014e-112,5.20495046564705e-116,1.73329464947047e-119,3.80395724447685e-123,4.95217972338712e-127,3.18727906721684e-131,6.76178155308401e-136},
                                 .001);
    }


    @Test
    public void variableWidth() throws Exception {

        FixedBoxcar variableWidthBoxcar = FixedBoxcar.buildVariableWidthVB(
                10,
                113,
                0.364,
                1,
                100,
                1.5,
                .1
        );

        //equal distance (originally from R)
        System.out.println(Arrays.toString(variableWidthBoxcar.getLengthPerBin()));
        Assert.assertArrayEquals(
                variableWidthBoxcar.getLengthPerBin(),
                new double[]{0.3,0.609,0.92727,1.2550881,1.592740743,1.94052296529,2.2987386542487,2.66770081387616,3.04773183829245,3.43916379344122,3.84233870724446,4.25760886846179,4.68533713451564,5.12589724855111,5.57967416600765,6.04706439098788,6.52847632271751,7.02433061239904,7.53506053077101,8.06111234669414,8.60294571709497,9.16103408860782,9.73586511126605,10.327941064604,10.9377792965422,11.5659126754384,12.2128900557016,12.8792767573726,13.5656550600938,14.2726247118966,15.0008034532535,15.7508275568511,16.5233523835566,17.3190529550633,18.1386245437153,18.9827832800267,19.8522667784275,20.7478347817803,21.6702698252337,22.6203779199908,23.5989892575905,24.6069589353182,25.6451677033777,26.7145227344791,27.8159584165135,28.9504371690089,30.1189502840791,31.3225187926015,32.5621943563795,33.8390601870709,35.1542319926831,36.5088589524636,37.9041247210375,39.3412484626686,40.8214859165486,42.3461304940451,43.9165144088665,45.5340098411325,47.2000301363664,48.9160310404574,50.6835119716711,52.5040173308213,54.3791378507459,56.3105119862683,58.2998273458564,60.348822166232,62.459286831219,64.6330654361556,66.8720573992402,69.1782191212175,71.553565694854,74.0001726656996,76.5201778456706,79.1157831810407,81.7892566764719,84.5429343767661,87.3792224080691,90.3005990803112,93.3096170527205,96.4089055643021,99.6011727312312,102.889207913168,106.275884150563,109.76416067508,113.357085495332,117.057798060192,120.869532001998,124.795617962058,128.83948650092,133.004671095948,137.294811228826,141.713655565691,146.265065232661,150.953017189641,155.781607705331,160.75505593649,165.877707614585,171.154038843023,176.588660008313,182.186319808563},
                .001f);

        System.out.println(Arrays.toString(variableWidthBoxcar.getProportionGraduating()));
        Assert.assertArrayEquals(
                variableWidthBoxcar.getProportionGraduating(),
                new double[]{0.363725672740169,0.352163507248735,0.340938103858992,0.330039653966039,0.319458634652491,0.309185800367494,0.299212174848079,0.289529043275831,0.280127944661998,0.271000664454394,0.262139227359632,0.253535890374427,0.245183136019859,0.237073665772705,0.22920039368809,0.221556440207881,0.214135126149425,0.206929966869371,0.199934666597475,0.193143112935439,0.186549371515987,0.18014768081749,0.173932447129628,0.167898239665685,0.162039785817197,0.156351966546819,0.150829811915385,0.145468496739235,0.140263336374042,0.135209782621426,0.130303419754809,0.125539960661007,0.120915243094208,0.116425226039063,0.1120659861797,0.10783371447158,0.10372471281321,0.0997353908147941,0.0958622626609918,0.0921019440650672,0.0884511493117423,0.0849066883861844,0.0814654641866131,0.0781244698180976,0.0748807859651699,0.0717315783409684,0.0686740952106755,0.0657056649870901,0.0628236938962307,0.06002566371093,0.057309129550444,0.0546717177441472,0.0521111237574512,0.0496251101781342,0.0472115047613221,0.0448681985314074,0.0425931439392569,0.0403843530730916,0.0382398959214749,0.0361578986868953,0.0341365421484686,0.0321740600723263,0.0302687376683045,0.0284189100915844,0.0266229609879725,0.0248793210815535,0.0231864668034765,0.0215429189606834,0.0199472414434086,0.0183980399703261,0.0168939608702461,0.0154336898992948,0.0140159510925457,0.0126395056491001,0.0113031508496384,0.0100057190055007,0.00874607643837684,0.00752312248971285,0.00633578855897111,0.00518303716990148,0.00406386106400859,0.00297728232042331,0.00192235150140845,0.000898146822753246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,Double.NaN},
                .001f);

        //should start empty!
        for(int i=0; i<100; i++)
            assertEquals(0,
                                variableWidthBoxcar.getCurrentDistribution()[i],
                                .001f);

        //add 10,000 recruits!
        variableWidthBoxcar.getCurrentDistribution()[0]=10000;
        //step for 100 times
        for(int i=0; i<100; i++)
            VariableProportionAging.variableAging(variableWidthBoxcar.getCurrentDistribution(),
                                                  variableWidthBoxcar.getProportionGraduating());
        System.out.println(variableWidthBoxcar.getCurrentDistribution()[0]);
        //these numbers also come from R
        Assert.assertArrayEquals(variableWidthBoxcar.getCurrentDistribution(),
                                 new double[]{2.31440865183633e-16,3.68027242869262e-14,2.6400888812681e-12,1.14324296722198e-10,3.37277486769979e-09,7.2519856405062e-08,1.18692284258314e-06,1.52461739780937e-05,0.000157244793347641,0.00132548216092678,0.00926273302403179,0.0542949016886913,0.269586379675244,1.14336791954589,4.1720801792485,13.1802561124817,36.248901858243,87.2138995651715,184.367531864409,343.78049843634,567.40840044141,831.571099930468,1085.25903078455,1264.51540412593,1318.54649663061,1233.04668506903,1036.15728212589,783.805225423923,534.604451117734,329.262011352827,183.366474821826,92.4481499874663,42.2432155648367,17.5117496078846,6.59181354067274,2.25491426009893,0.701474361128308,0.19857236686343,0.0511779381399279,0.0120143359744633,0.00256998821372463,0.000501076785588236,8.90662708195969e-05,1.44350774588106e-05,2.13329060178346e-06,2.87475810053939e-07,3.53211839506307e-08,3.95622222348781e-09,4.03861404618724e-10,3.75621273544483e-11,3.18169235489508e-12,2.45325795455826e-13,1.72089124684087e-14,1.09747953817636e-15,6.35824358559638e-17,3.34345380279231e-18,1.59419879635789e-19,6.88491484098483e-21,2.68984961324158e-22,9.49368736177576e-24,3.02244141246936e-25,8.66489848540366e-27,2.23274377362685e-28,5.16039761503171e-30,1.06732536686249e-31,1.97046835254795e-33,3.23791021182928e-35,4.72065932105648e-37,6.08466681440599e-39,6.90601552812023e-41,6.87080252728649e-43,5.96125563895019e-45,4.48385866195847e-47,2.90390077713296e-49,1.60641553092026e-51,7.51921545158257e-54,2.94432018265448e-56,9.51120862369852e-59,2.49061190108622e-61,5.16779310237014e-64,8.23807649569256e-67,9.65073224450032e-70,7.74555085190987e-73,3.74395356401119e-76,7.8640066030966e-80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                 .001);
    }



    @NotNull
    private static PrototypeScenario oneCellBlockFixedBoxcar() {
        PrototypeScenario scenario = new PrototypeScenario();
        scenario.setFishers(0);
        SimpleMapInitializerFactory map = new SimpleMapInitializerFactory();
        map.setCoastalRoughness(new FixedDoubleParameter(0));
        map.setHeight(new FixedDoubleParameter(1));
        map.setWidth(new FixedDoubleParameter(2.0));
        map.setMaxLandWidth(new FixedDoubleParameter(1.0));
        scenario.setMapInitializer(map);

        SingleSpeciesAbundanceFactory biology = new SingleSpeciesAbundanceFactory();
        //no movement
        biology.setDiffuser(new NoDiffuserFactory());
        //10% yearly mortality
        ProportionalMortalityFactory mortalityProcess = new ProportionalMortalityFactory();
        biology.setMortalityProcess(mortalityProcess);
        mortalityProcess.setYearlyMortality(new FixedDoubleParameter(0.095175));
        //Aphaerus rutilans numbers
        EquallySpacedBertalanffyFactory meristics = new EquallySpacedBertalanffyFactory();
        meristics.setNumberOfBins(100);
        meristics.setRecruitLengthInCm(new FixedDoubleParameter(10));
        meristics.setMaxLengthInCm(new FixedDoubleParameter(113));
        meristics.setkYearlyParameter(new FixedDoubleParameter(0.364));
        meristics.setAllometricAlpha(new FixedDoubleParameter(0.015));
        meristics.setAllometricBeta(new FixedDoubleParameter(2.961));
        biology.setMeristics(meristics);
        //VB Aging
        FixedBoxcarBertalannfyAging aging = new FixedBoxcarBertalannfyAging();
        aging.setLInfinity(new FixedDoubleParameter(113));
        aging.setK(new FixedDoubleParameter(0.364));
        biology.setAging(aging);
        //initial abundance
        OneBinAbundanceFactory initial = new OneBinAbundanceFactory();
        initial.setInitialBin(0);
        initial.setInitialSubdivision(-1);
        initial.setInitialBinPopulation(new FixedDoubleParameter(10000));
        biology.setInitialAbundanceFactory(initial);
        //no recruitment
        FixedRecruitmentFactory recruitment = new FixedRecruitmentFactory();
        recruitment.setYearlyRecruits(new FixedDoubleParameter(0));
        biology.setRecruitment(recruitment);
        //add!
        biology.setRounding(false);
        biology.setDaily(true);
        scenario.setBiologyInitializer(biology);
        return scenario;
    }


    @Test
    public void allIntegratedFixedBoxcarPlusDailyRecruits() throws Exception {

        //no fisher, one single box!
        PrototypeScenario scenario = oneCellBlockFixedBoxcar();

        FixedRecruitmentFactory recruitment = new FixedRecruitmentFactory();
        recruitment.setYearlyRecruits(new FixedDoubleParameter(10*365));
        ((SingleSpeciesAbundanceFactory) scenario.getBiologyInitializer()).setRecruitment(recruitment);


        FishState state =new FishState(System.currentTimeMillis());
        state.setScenario(scenario);
        state.start();
        // there are 10,000 fish initially, all of length 10 which means weight 13.7117g
        // this means 137.117 kg worth of fish in the sea
        Species species = state.getSpecies().get(0);
        assertEquals(137.117, state.getTotalBiomass(species), .0001);


        //step it for 1000 steps
        for(int i=0; i<1000; i++)
            state.schedule.step(state);

        //numbers computed from R
        double[] expectedAbundance = new double[]{101.034909929416,101.78047704758,102.539267035032,103.311654184481,104.098027423304,104.898791047056,105.714365498008,106.545188191984,107.391714397065,108.254418168019,109.133793340657,110.030354590674,110.94463856196,111.877205069776,112.828638384715,113.799548603886,114.790573116368,115.802378170641,116.835660552429,117.891149382211,118.969608042536,120.071836246325,121.198672258394,122.350995283734,123.529728037434,124.735839512708,125.970347965218,127.234324133935,128.52889472129,129.855246159263,131.214628696253,132.608360862291,134.03783444032,135.504520289107,137.009976014625,138.55585833585,140.143947943836,141.776207131113,143.454919947307,145.183029712579,146.964922310019,148.808156895987,150.727083961376,152.749970396733,154.932160952591,157.378761321399,160.280835567458,163.968256516969,168.978851829886,176.136092186272,186.615884513884,201.968760872037,224.051752094466,254.822542517962,295.966280652427,348.368459566736,411.512166733892,482.947888456209,558.029872623696,630.102708191018,691.235847173384,733.451177404509,750.212703057669,737.814641552592,696.278150555617,629.475674211492,544.418957740629,449.896329117122,354.833063278635,266.805886977535,191.054773315146,130.147290670075,84.2428594691442,51.7525544081309,30.1354450032376,16.6102441960796,8.65334528915145,4.25404639896348,1.96999822327511,0.857698635898846,0.350333439364466,0.133930082609909,0.0477945391610409,0.0158744170483338,0.00489090266880036,0.00139254504121545,0.000364821378542261,8.75056571832177e-05,1.91053061234377e-05,3.77104019861888e-06,6.67430891682503e-07,1.04876096001684e-07,1.44519922994949e-08,1.71937476871579e-09,1.73021184053611e-10,1.43194941515714e-11,9.35781162067081e-13,4.52748341054907e-14,1.44167857183e-15,2.27584975496875e-17};
        int numberOfBins = species.getNumberOfBins();
        for(int i = 0; i< numberOfBins; i++)
            assertEquals(
                    expectedAbundance[i],
                    state.getTotalAbundance(species,i),
                    .0001
            );





    }

}